pipelines:
  service1:
    directory: src/service1
    stages:
      - name: unit
        build: test
        run: true
      - name: lint
      - name: candidate
        build: production
        run: false
        publish:
          image: true
    execution:
      - [unit, candidate]
      - [lint, candidate]
  service2:
    directory: src/service2
    stages:
      - name: test
        exports:
          foo: '${setup.timestamp}-${.stage}'
        trigger:
          name: totally-triggered
          parameters:
            TRIGGER: 'spiders-from-${setup.timestamp}-${.stage}'
  test-build-options:
    blubberfile: blubber.yaml
    stages:
      - name: test-context-and-excludes
        build:
          variant: service1-checkexcludes
          context: src/service1
          excludes: [Makefile]
  test-checkout-binding:
    stages:
      - name: test
        exports:
          commit: '${setup.commit}'
          branch: '${setup.branch}'
          remote: '${setup.remote}'
  test-command-output:
    blubberfile: blubber.yaml
    stages:
      - name: cat
        build: bash
        run:
          arguments:
            - |-
              cat <<-end
              hey
              you
              end
          tail: 1
      - name: test-it
        build: bash
        run:
          arguments:
            - '[[ "$1" == you* ]]'
            - --
            - '${cat.output}'
  test-list-comprehensions:
    blubberfile: blubber.yaml
    stages:
      - name: sequence
        build: sequence
        run:
          arguments: [1, 5]
          tail: 5
      - name: square
        build: arithmetic
        run:
          arguments:
            $each: number
            $in: '${sequence.output}'
            $yield: '${.number}*${.number}'
  test-copy:
    blubberfile: blubber.yaml
    stages:
      - name: make-a-file
        build: sh-local
        run:
          arguments: ['mkdir /tmp/foo && echo hi > /tmp/foo/greeting']
        copy:
          - source: /tmp/foo/greeting
            destination: bar/greeting
      - name: check-file-contents
        build: sh-local
        run:
          arguments: ['[[ $(cat bar/greeting) == "hi" ]]']

  # Tests fix for CPS-serialization regression in parallel execution graphs
  # See https://phabricator.wikimedia.org/T287507
  test-T287507:
    blubberfile: blubber.yaml
    stages:
      - name: stage1
        build: bash
        run:
          arguments: ['sleep 10']

      - name: stage2
        build: bash
        run:
          arguments: ['sleep 10']

      - name: stage3
        build: bash
        run:
          arguments: ['sleep 2']

      - name: stage4
        build: bash
        run:
          arguments: ['sleep 10']

    execution:
      - [stage1]
      - [stage2]
      - [stage3]
      - [stage4]

# The following pipeline can be used to manually test notification upon failure
#
#  test-notify:
#    notify:
#      email:
#        to: [jenkins@localhost]
#    blubberfile: blubber.yaml
#    stages:
#      - name: test
#        build: bash
#        run:
#          arguments: ['false']
#        notify:
#          email:
#            subject: >-
#              Failure notification ${setup.pipeline}/${.stage}
